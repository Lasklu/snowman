name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Select platform(s)
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    env:
      prerelease: ${{ github.ref != 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Run (root) npm install
        run: npm ci
        working-directory: ./
      - name: Run (app) npm install
        run: npm ci
        working-directory: ./app
      - name: Run (wrapper) npm install
        run: npm ci
        working-directory: ./wrapper
      - name: Release stack
        run: npm run release
        working-directory: ./
      - name: Get current time
        uses: 1466587594/get-current-time@v1
        id: current-time
        with:
          format: YYYYMMDD-HHmmss
          utcOffset: "+01:00"
      - name: Generate release name
        uses: haya14busa/action-cond@v1
        id: tag_prefix
        with:
          cond: ${{ env.prerelease }}
          if_true: "Trunk"
          if_false: ""
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_prefix.outputs.value }}${{ steps.current-time.outputs.formattedTime }} 
          release_name: ${{ steps.current-time.outputs.formattedTime }}
          draft: false
          prerelease: ${{ env.prerelease }}
      - name: Upload ReleaseMac
        id: upload-release-asset-macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./wrapper/build/*.dmg
          asset_name: snowman.dmg   
      - name: Upload Release Asset
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /home/runner/.smalltalkCI/_builds/TelegramClient.sar
          asset_name: snowman.
          asset_content_type: application/zip
